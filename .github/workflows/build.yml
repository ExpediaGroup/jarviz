name: Build

defaults:
  run:
    shell: bash

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
jobs:
  build_java:
    name: Build Java module
    timeout-minutes: 15
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: [ 8, 11 ]
    steps:
      - name: Checkout project
        uses: actions/checkout@v2
      - name: Setup Java SDK ${{ matrix.java-version }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java-version }}
      - name: Cache local Maven repository
        uses: actions/cache@v2
        env:
          cache-name: cache-maven-packages
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ env.cache-name }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Display system info
        run: |
          echo "Maven version: $(mvn --version)"
      - name: Run build script for Java
        run: |
          LAST_COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          if [[ ("$LAST_COMMIT_MSG" == '[maven-release-plugin] prepare release'* ) ]] ; then
            echo 'Skipping build for release preparation step.'
            exit 0
          fi

          echo 'Compile, test (no IT tests) and build jarviz-lib module.'
          mvn clean install -DskipITs
  build_node:
    name: Build Node module
    timeout-minutes: 15
    needs: build_java
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ 12.x ]
    steps:
      - name: Checkout project
        uses: actions/checkout@v2
      - name: Setup Node ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ env.cache-name }}-${{ hashFiles('**/package.json') }}
          restore-keys: ${{ runner.os }}-npm
      - name: Display system info
        run: |
          echo "Node version: $(node -v)"
          echo "NPM version: $(npm -v)"
      - name: Run build script for Node
        run: |
          LAST_COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          if [[ ("$LAST_COMMIT_MSG" == '[maven-release-plugin] prepare release'* ) ]] ; then
            echo 'Skipping build for release preparation step.'
            exit 0
          fi

          JARVIZ_HOME="$(pwd)"
          cd ./jarviz-graph
          echo 'Installing jarviz-graph'
          npm install
          echo 'Building jarviz-graph'
          npm run build
          cd "${JARVIZ_HOME}"
          echo 'Done'
